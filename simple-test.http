### ===========================================
### ðŸš€ RAILWAY DATA GENERATION - LIVE SERVER
### Force populate database with real data
### ===========================================

### METHOD 1: Simple GET request (try first)
GET https://universal-student-api-production.up.railway.app/api/v1/admin/populate-data

###

### METHOD 2: POST request with parameters
POST https://universal-student-api-production.up.railway.app/api/v1/admin/populate-data
Content-Type: application/json

{
  "action": "populate_all_domains",
  "domains": ["movies", "books", "electronics", "restaurants", "fashion", "games"],
  "products_per_domain": 500,
  "force_regenerate": true
}

###

### METHOD 3: Initialize database endpoint
GET https://universal-student-api-production.up.railway.app/api/v1/admin/init-database

###

### METHOD 4: Full system reset and populate
POST https://universal-student-api-production.up.railway.app/api/v1/admin/reset-and-populate
Content-Type: application/json

{
  "reset_database": true,
  "populate_data": true,
  "domains": ["movies", "books", "electronics", "restaurants", "fashion"],
  "products_per_domain": 500
}

###

### METHOD 5: Debug - check current data status
GET https://universal-student-api-production.up.railway.app/api/v1/admin/database-status

###

### METHOD 6: Force data generation via internal endpoint
POST https://universal-student-api-production.up.railway.app/api/v1/internal/generate-data
Content-Type: application/json

{
  "secret_key": "universal-student-api-2024",
  "action": "generate_full_database",
  "domains": ["movies", "books", "electronics", "restaurants", "fashion", "games", "toys", "tools"],
  "products_per_domain": 500
}

###

### METHOD 7: Alternative - trigger via health check with parameter
GET https://universal-student-api-production.up.railway.app/health?populate=true

###

### METHOD 8: Status check after population
GET https://universal-student-api-production.up.railway.app/api/v1/status

###

### ===========================================
### ðŸŽ¯ EXPECTED RESULTS
### ===========================================

# Success Response:
{
  "success": true,
  "message": "Database populated successfully",
  "data": {
    "products_created": 4000,
    "domains_populated": 8,
    "users_created": 10,
    "categories_created": 200,
    "brands_created": 150
  }
}

# Error Response:
{
  "success": false,
  "error": "Endpoint not found",
  "available_endpoints": [...]
}

### ===========================================
### ðŸ“‹ TESTING SEQUENCE
### ===========================================

# 1. Try METHOD 1 (GET populate-data)
# 2. If 404, try METHOD 2 (POST populate-data)  
# 3. If still 404, try METHOD 3 (init-database)
# 4. Check METHOD 8 (status) to verify results
# 5. Test a domain: GET /api/v1/movies/products

### ===========================================
### ðŸ”§ TROUBLESHOOTING
### ===========================================

# If ALL methods return 404:
# - Admin endpoints might not be implemented
# - Need to add endpoint to server code
# - Alternative: redeploy with data generation in startup

# If authentication required:
# - Some endpoints might need admin token
# - Check server.js for endpoint definitions

### ===========================================
### âœ… SUCCESS VERIFICATION
### ===========================================

# After successful population, these should work:
GET https://universal-student-api-production.up.railway.app/api/v1/movies/products
GET https://universal-student-api-production.up.railway.app/api/v1/books/products
GET https://universal-student-api-production.up.railway.app/api/v1/electronics/products

# Expected: 200 OK with actual product data (not empty arrays)